{
    "componentChunkName": "component---src-pages-mdx-slug-js",
    "path": "/projects/skyduck/",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Sensor fusion library for Skyduck & Snowduck mobile apps\",\n  \"order\": 30,\n  \"thumbnail\": \"./thumb.jpg\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Sensor fusion library for Skyduck & Snowduck mobile apps\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://skyduck.app/\"\n  }, \"Skyduck\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://snowduck.app/\"\n  }, \"Snowduck\"), \" are the mobile\\ntracking apps for skydivers and skiers / snowboarders, respectively.\"), mdx(\"p\", null, \"I've developed a data processing library for these apps, which processess the live\\ndata from the mobile device sensors: GPS, barometer, accelerometer, magnetometer\\nand gyroscope.\"), mdx(\"p\", null, \"This library solves two major problems:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Improve the raw GPS tracks quality and resolution using the data from other sensors.\\nI've designed and implemented a custom data fusion algorithm, as conventional algorithms like Kalman filter didn't quite fit our needs.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Detect domain-specific user activities: free-fall, canopy and landing for skydivers;\\ndownhill, lift and rest for skiers. Here I've used conventional ML approaches to solve the activity classification problem.\")), mdx(\"p\", null, \"The prototyping and R&D was done using \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Python + Numpy, Pandas, Matplotlib\"), \" and other scientific libraries. The production solution is a library written in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"C++\"), \".\"), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Skills:\"), \" Algorithm development, Sensor fusion, Spatial data, Classification, Python, C++\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Dates:\"), \" Nov 2018 \\u2013 May 2020\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Client:\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://t.me/mrjamesbond\"\n  }, \"Igor Kamenev\")));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Sensor fusion library for Skyduck & Snowduck mobile apps"}}},"pageContext":{"id":"768ef512-8b77-5a09-8c48-2f3654410e35","slug":"projects/skyduck/","__params":{"slug":"projects"}}},
    "staticQueryHashes": ["2744905544","3232733727"]}